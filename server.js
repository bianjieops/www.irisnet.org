const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const express = require('express')
const request = require('request')


const bodyParser = require('body-parser');
const favicon = require('serve-favicon')
const compression = require('compression')
const resolve = file => path.resolve(__dirname, file)
const { createBundleRenderer } = require('vue-server-renderer')
const axios = require('axios')
const isProd = process.env.NODE_ENV === 'production'

const useMicroCache = process.env.MICRO_CACHE !== 'false'
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express();
app.all('*', function (req, res, next) {
	res.header('Access-Control-Allow-Origin', '*');
	res.header('Access-Control-Allow-Headers', 'Content-Type');
	res.header('Access-Control-Allow-Methods', '*');
	next();
});
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.route('/news_letter')
    .post((req, res, next) => {
        request({
            url: 'http://as-node.rainbow.one/news_letter/newsletter',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            json: {
                'email': req.body.email,
            }
        }, function(err, response, body) {
            if (err) {
                res.send(err)
            } else {
               res.send(body)
            }
        });
    });




//query validator by address
let cache = null;
app.route('/validators')
.get((req, res, next) => {
    request({
        url: `https://cosmos-mainnet-rpc.allthatnode.com:1317/staking/validators/cosmosvaloper1ssm0d433seakyak8kcf93yefhknjleeds4y3em`,
        method: 'get',
        headers: {
            'Content-Type': 'application/json'
        },
    }, function(err, response, body) {
        if (err) {
            res.send(err)
        } else {
            cache = body;
            res.send(cache)
        }
    })
})

//query all bond tokens
let tokencache = null;
app.route('/bondedTokens')
.get((req, res, next) => {
    request({
        url: `https://cosmos-mainnet-rpc.allthatnode.com:1317/staking/pool`,
        method: 'get',
        headers: {
            'Content-Type': 'application/json'
        },
    }, function(err, response, body) {
        if (err) {
            res.send(err)
        } else {
            tokencache = body;
            res.send(tokencache)
        }
    });
});
//query slash info
let blockcache = null;
app.route('/missedBlockCounter')
.get((req, res, next) => {
    request({
        url: `https://cosmos-mainnet-rpc.allthatnode.com:1317/slashing/validators/cosmosvalconspub1zcjduepqrgyyjxpe0ujefxwnkpmqz9m0hj03y09tdz9lwc0s7mvy469hulfq69f8sd/signing_info`,
        method: 'get',
        headers: {
            'Content-Type': 'application/json'
        },
    }, function(err, response, body) {
        if (err) {
            res.send(err)
        } else {
            blockcache = body;
            res.send(blockcache)
        }
    });
});
//query slash parameters
let signedBlockscache = null;
app.route('/signedBlocksWindow')
.get((req, res, next) => {
    request({
        url: `https://cosmos-mainnet-rpc.allthatnode.com:1317/slashing/parameters`,
        method: 'get',
        headers: {
            'Content-Type': 'application/json'
        },
    }, function(err, response, body) {
        if (err) {
            res.send(err)
        } else {
            signedBlockscache = body
            res.send(signedBlockscache)
        }
    });
});

const template = fs.readFileSync(resolve('index.html'), 'utf-8')

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    template,
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer
let readyPromise
if (isProd) {
  // In production: create server renderer using built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    clientManifest
  })
}
else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(app, (bundle, options) => {
    renderer = createRenderer(bundle, options)
  })
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
})

app.use(compression({ threshold: 0 }))
//设置pageiocn
app.use(favicon('./src/assets/favicon.ico'))
app.use('/dist', serve('./dist', true))
app.use('/public', serve('./public', true))
// app.use('/manifest.json', serve('./manifest.json', true))
app.use('/service-worker.js', serve('./dist/service-worker.js'))

// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
const microCache = LRU({
  max: 100,
  maxAge: 1000
})

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
const isCacheable = req => useMicroCache

function render (req, res) {
  const s = Date.now()

  res.setHeader('Content-Type', 'text/html')
  res.setHeader('Server', serverInfo)

  const handleError = err => {
      console.log("err",err)
    if (err && err.code === 404) {
      res.status(404).end('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).end(err)
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const cacheable = isCacheable(req)
  if (cacheable) {
    const hit = microCache.get(req.url)
    if (hit) {
      if (!isProd) {
        console.log(`cache hit!`)
      }
      return res.end(hit)
    }
  }

  const context = {
    title: 'Vue SSR', // default title
    url: req.url
  }
  renderer.renderToString(context, (err, html) => {

    if (err) {
      return handleError(err)
    }

    res.end(html)
    if (cacheable) {
      microCache.set(req.url, html)
    }
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`)
    }
  })
}



app.get('*', isProd ? render : (req, res) => {
    // console.log(req.url)
    // res.redirect('/newApp');
    // if(req.url === '/hackathon/app'){
    //     req.url = '/newApp';
    // }
  readyPromise.then(() => render(req, res))
})


const port = process.env.PORT || 3000
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})
